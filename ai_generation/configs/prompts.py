PLANNER_PROMPT = """
You are a senior MERN stack architect. Create a comprehensive plan for this application: '{description}'

You MUST include ALL of these sections in your response:

## OVERALL ARCHITECTURE
- Frontend: React 18+ with modern hooks, responsive design
- Backend: Express.js with middleware, validation, error handling  
- Database: MongoDB with Mongoose ODM, proper indexing
- Security: CORS, helmet, rate limiting, input sanitization

## DATABASE SCHEMA
Detail all Mongoose models with field names, types, validation rules, indexes, and relationships.

## BACKEND API DESIGN  
List all endpoints with HTTP methods, routes, request/response schemas, authentication requirements.

## FRONTEND ARCHITECTURE
Detail all components with hierarchy, props, state management, responsive design.

## SECURITY IMPLEMENTATION
Input validation, authentication strategy, CORS config, environment variables.

## COMPLETE FILE STRUCTURE
**CRITICAL RULES FOR THIS SECTION:**
- You MUST list every single file required for the project.
- The list MUST NOT contain any directories. Every path must be to a specific file.
- The list MUST NOT contain any wildcards (`*`).

### Files to Exclude
Your file list **MUST NOT** include any of the following:
- `node_modules/`
- `build/` or `dist/`
- `.cache/`
- Any other directory generated by package managers or build tools.

At the end, output the complete file list as valid JSON with this exact format. **Remember, do not include `node_modules` in the JSON output.**
{{
  "files": [
    {{"path": "package.json", "type": "config", "description": "Project dependencies and scripts"}},
    {{"path": ".env", "type": "config", "description": "Environment variables for secrets"}},
    {{"path": ".env.example", "type": "config", "description": "Template for environment variables"}},
    {{"path": ".gitignore", "type": "config", "description": "Specifies intentionally untracked files to ignore"}}
  ]
}}
"""

PSEUDO_GEN_PROMPT = """
You are a senior architect generating structured pseudocode.

STEPS:
1. Use the following plan content:
{plan_content}

2. Generate concise pseudocode for THIS FILE ONLY: {file_path}
   Description: {file_desc}

3. VERIFICATION FEEDBACK (if provided, address these issues):
{verification_feedback}

4. Follow this EXACT format:
BEGIN FILE
# File Path: {file_path}

# Imports/Dependencies:
- Import [variable/class] from [path]

# Main Logic:
INITIALIZE [variable] as [description]
IF [condition]: [action]

# Functions/Classes:
DEFINE FUNCTION [name](parameters): [explanation]
  [step 1]

# Exports/Outputs:
EXPORT [what this file exposes]
END FILE

5. Requirements:
   - Use consistent variable/class names across all files.
   - If verification feedback is provided, you MUST address those specific issues.
   - Keep it minimal but complete.
   - Output ONLY the pseudocode content.
"""

PSEUDO_VER_PROMPT = """
You are a QA expert verifying pseudocode consistency.

CRITICAL: You MUST output ONLY valid JSON, no other text before or after.

STEPS:
1. Use the provided plan and global summary to understand the project context.
   Plan: {plan_content}
   Global Summary: {global_summary_content}

2. For these files in the current batch, verify their pseudocode:
{batch_pseudo_contents}

3. Verify the following for each file:
   - Logic matches the plan requirements.
   - Dependencies resolve (imported items exist in the global summary).
   - No major gaps or ambiguities.

4. Output ONLY a JSON object with this exact format:
{{
  "file/path/one.js": {{"pass": true, "issues": ""}},
  "file/path/two.js": {{"pass": false, "issues": "The user model is missing the 'email' field as required by the plan."}}
}}
"""

CODE_GEN_PROMPT = """
You are a senior developer translating pseudocode to production-ready code.

**PROJECT CONTEXT:**
This file is part of a larger MERN application with these files:
{project_context}

**PREVIOUS ATTEMPT ERROR (if retrying):**
{retry_error}

**CRITICAL INSTRUCTIONS BASED ON FILE TYPE:**

### IF THE FILE IS `package.json`:
- Use this pre-approved list of dependencies: {dependency_list}
- Determine the latest stable versions for all packages.
- **Output ONLY the raw, valid JSON content.**
- **DO NOT wrap the JSON in markdown code fences (```json).**
- **DO NOT add any comments or explanations.**

### IF THE FILE IS `.env` or `.env.example`:
- **Output ONLY `KEY=VALUE` pairs, one per line.**
- **DO NOT output JSON or JavaScript code.**
- For `.env.example`, the values should be placeholders (e.g., `MONGODB_URI=your_connection_string_here`).

### IF THE FILE IS `.gitignore`:
- **Output ONLY a list of file and directory names, one per line.**
- **DO NOT output JSON or JavaScript code.**
- Always include `node_modules` and `.env`.

### FOR ALL OTHER FILES (JavaScript, CSS, etc.):
- Translate the pseudocode below into production-ready MERN stack code.
- Consider how this file interacts with others in the project context.
- Follow all security and performance best practices.
- **Output ONLY the raw code for the file.**

**Pseudocode to Translate:**
{pseudo_content}

**File Description:** {file_desc}
"""


CODE_VER_PROMPT = """
Verify the following generated code against its pseudocode with reasonable flexibility.

FILE: {file_path}

PSEUDOCODE:
{pseudo_content}

GENERATED CODE:
{code_content}

CRITICAL VERIFICATION RULES:
- Core logic and functionality MUST match the pseudocode's intent.
- For JSON files (like package.json), the content MUST be valid, parseable JSON.
- For .gitignore, the content MUST be a plain list of files/folders.
- Allow for modern best practices even if they differ slightly from the pseudocode.

Output ONLY: 'PASS' or 'FAIL: [brief, specific reason]'.
"""


SANITY_CHECK_PROMPT = """
You are a senior software architect. The following is a list of files and their descriptions for a MERN application:

{file_list}

Does this list represent a complete and logical project structure for a MERN stack application? 

Look for:
- Obvious omissions (missing models when there are routes, missing components when there's complex UI)
- Contradictions (API routes referencing non-existent models)
- Incomplete structures (frontend without routing, backend without middleware)

Answer ONLY with:
- 'PASS' if the structure is complete and logical
- 'FAIL: [provide a brief, one-sentence reason]' if there are critical issues

Do not provide suggestions or additional commentary.
"""

PLAN_REGEN_PROMPT = """
You are a senior MERN stack architect. Your previous attempt to create a project plan resulted in a validation error.

PREVIOUS FAILED PLAN:
---
{previous_plan}
---

VALIDATION ERROR:
---
{error_message}
---

CRITICAL INSTRUCTIONS:
1.  Analyze the validation error and the previous plan carefully.
2.  Your primary goal is to fix the specific error mentioned above. For example, if 'package.json' was missing, you MUST ensure it is included in the new file list.
3.  Regenerate the COMPLETE plan, incorporating the fix. Do not just output the corrected part.
4.  You MUST follow all the rules from the original planning prompt, including providing the full architecture details and the final JSON file list.
5.  The final JSON file list MUST be valid and complete, addressing the validation error.

Output the new, corrected, and complete plan.
"""